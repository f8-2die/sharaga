node server.js
npm run serve


<!-- ChatContainer.vue -->
<template>
  <div class="ChatContainer">
    <div v-for="(message, index) in messages" :key="index" class="message">
      <template v-if="message.type === 'text'">
        <span v-if="message.nickname">{{ message.nickname }}: {{ message.content }}</span>
        <span v-else>Anonymous: {{ message.content }}</span>
      </template>
      <template v-else-if="message.type === 'image'">
        <div>
          <span v-if="message.nickname">{{ message.nickname }}:</span>
          <img :src="message.content" alt="Sent Image" class="sent-image" />
        </div>
      </template>
    </div>
  </div>
</template>

<script>
export default {
  props: {
    messages: {
      type: Array,
      default: () => [],
    },
    nickname: {
      type: String,
      default: '',
    },
  },
};
</script>

<style scoped>
@import 'styles.css';
</style>
<!-- ChatInput.vue -->
<template>
  <div class="chat-input">
    <input v-model="nickname" placeholder="никнейм" @input="updateNickname" class="nickname-input" />
    <input v-model="message" @keyup.enter="sendMessage" placeholder="Введите сообщение" class="text-input"/>
    <label for="file-input" class="custom-file-upload"> </label>
    <input id="file-input" type="file" ref="fileInput" @change="handleFileChange" class="file-input" />
    <button @click="sendImage">Отправить изображение</button>
  </div>
</template>

<script>
export default {
  props: ['initialNickname'],

  data() {
    return {
      nickname: this.initialNickname,
      message: '',
      selectedImage: null,
    };
  },

  methods: {
    sendMessage() {
      if (this.nickname.trim() !== '' && this.message.trim() !== '') {
        this.$emit('message', { type: 'text', nickname: this.nickname, content: this.message });
        this.message = '';
      } else {
        alert('Введите никнейм и сообщение');
      }
    },

    updateNickname() {
      this.$emit('update:nickname', this.nickname); // Передаем обновленный nickname в родительский компонент
    },
    handleFileChange(event) {
      if (event.target.files && event.target.files.length > 0) {
        this.selectedImage = event.target.files[0];
      }
    },
    sendImage() {
      if (this.nickname.trim() !== '' && this.selectedImage) {
        const reader = new FileReader();
        reader.onload = (event) => {
          const imageData = event.target.result;
          this.$emit('message', { type: 'image', nickname: this.nickname, content: imageData });
        };
        reader.readAsDataURL(this.selectedImage);
        this.selectedImage = null;
        this.$refs.fileInput.value = '';
      } else {
        alert('Введите никнейм и выберите изображение');
      }
    },
  },
};
</script>

<style scoped>
@import 'styles.css';
</style>
<!-- App.vue -->
<template>
  <div id="app">
    <chat-container :messages="messages" />
    <chat-input @message="sendMessage" :initialNickname="nickname" @update:nickname="updateNickname($event)" />
  </div>
</template>

<script>
import ChatContainer from './components/ChatContainer.vue';
import ChatInput from './components/ChatInput.vue';

export default {
  data() {
    return {
      messages: [],
      ws: null,
      nickname: '', // Инициализируйте nickname
    };
  },
  methods: {
    sendMessage(message) {
      if (this.nickname.trim() !== '' && this.ws.readyState === WebSocket.OPEN) {
        this.ws.send(JSON.stringify(message));
      } else {
        alert('Введите никнейм');
      }
    },

    updateNickname(newNickname) {
      this.nickname = newNickname; // Обновляем nickname в родительском компоненте
    },

  },
  created() {
    this.ws = new WebSocket('ws://localhost:8080');

    this.ws.onmessage = async (event) => {
      const parsedMessage = JSON.parse(event.data);
      if (parsedMessage.type === 'text' || parsedMessage.type === 'image') {
        this.messages.push({ type: parsedMessage.type, content: parsedMessage.content, nickname: parsedMessage.nickname });
      }
    };
  },
  components: {
    ChatContainer,
    ChatInput,
  },
};
</script>

<style>
@import 'components/styles.css';
</style>

/* ФОН */
body {
    margin: 0;
    padding: 0;
    font-family: Arial, sans-serif;
    background-color: #100614;    
  }




/* ЧАТ */
  .ChatContainer {
    border: 2px solid #4a224d;  
    border-radius: 4px;
    box-shadow: 0px 0px 10px 10px rgba(175, 11, 175, 0.5);
    padding: 10px;
    height: 600px;
    max-width: 600px; 
    overflow-y: auto;
    margin: 0 auto;
    color: rgb(255, 255, 255);  
  }
  
  .message {
    margin: 5px;
    border-radius: 5px;
    display: flex;
    align-items: center;
    background-color: #29242c;
  }
 
  /* ФИКСИРОВАННЫЙ РАЗМЕР ПИКЧИ */
  .sent-image {
    max-width: 200px; 
    max-height: 200px; 
    border-radius: 5px;
    margin-left: 10px;
  }
 
  
 
  
  /* НИЖНЯЯ ПАНЕЛЬ */



 .chat-input {
    margin-top: 10px;
    padding: 5px;
    display: flex;
    justify-content: center; /* Центрируем содержимое по вертикали   */
  } 

  
/* Стили для поля ввода никнейма */
.nickname-input {
    
    color: rgb(255, 255, 255); 
    width: 100px;
    border: 2px solid #4a224d;
    box-shadow: 0px 0px 10px 3px rgba(175, 11, 175, 0.5);
    background-color: #29242c;
    border-radius: 5px; /* Закругление плейсхолдера */
    padding: 8px; /* Добавляем отступы вокруг плейсхолдера */
    
  }
  .text-input{
    color: rgb(255, 255, 255); 
    width: 312px;
    border: 2px solid #4a224d; 
    box-shadow: 5px 0px 10px 3px rgba(175, 11, 175, 0.5);   
    background-color: #29242c; 
    border-radius: 5px; /* Закругление плейсхолдера */
    padding: 8px; /* Добавляем отступы вокруг плейсхолдера */ 
  }
  
  /* Стили для кнопки */
  button {
    width: 120px;
    padding: 8px 16px;
    background-color: #29242c;
    color: #fff;
    border: 2px solid #4a224d; 
    box-shadow: 0px 0px 10px 3px rgba(175, 11, 175, 0.5);
    cursor: pointer;
    transition: background-color 0.3s;
  }
  button:hover {
    background-color: #201d22;
    
  } 
  /* Стили для кастомной кнопки выбора файла с изображением */
  .custom-file-upload {
    
    padding: 0; /* Убираем отступы, чтобы изображение занимало всю область кнопки */
    width: 50px; /* Устанавливаем ширину кнопки */
    height: 50px; /* Устанавливаем высоту кнопки */
    display: inline-block;
    cursor: pointer;
 
    background-image: url('clip.png'); /* Указываем путь к вашему изображению */
    background-size: cover; /* Растягиваем изображение, чтобы оно занимало всю область кнопки */
    /* filter: blur(5px); Добавляем заблюренный эффект */
    opacity: 0.7; /* Задаем прозрачность фонового изображения */
  }  
  /* Скрытие стандартной кнопки выбора файла */
  input[type='file'] {
    display: none;
  }
  .custom-file-upload:hover{    
    filter: blur(1px);
  }
  // main.js
import { createApp } from 'vue'
import App from './App.vue'

createApp(App).mount('#app')

// server.js
const WebSocket = require('ws');
const wss = new WebSocket.Server({ port: 8080 });

wss.on('connection', (ws) => {
  ws.on('message', (message) => {
    try {
      const parsedMessage = JSON.parse(message);
      if (parsedMessage.type === 'text') {
        wss.clients.forEach((client) => {
          if (client.readyState === WebSocket.OPEN) {
            client.send(JSON.stringify({
              type: 'text',
              content: parsedMessage.content,
              nickname: parsedMessage.nickname, // Передаем nickname в сообщении
            }));
          }
        });
      } else if (parsedMessage.type === 'image') {
        wss.clients.forEach((client) => {
          if (client.readyState === WebSocket.OPEN) {
            client.send(JSON.stringify({
              type: 'image',
              content: parsedMessage.content,
              nickname: parsedMessage.nickname, // Передаем nickname в сообщении
            }));
          }
        });
      }
    } catch (error) {
      console.error('Error parsing message:', error);
    }
  });
});


